"""
IQL ‰∏ªËÆ≠ÁªÉËÑöÊú¨
"""
import argparse
import os
import sys
from src.trainer import IQLTrainer
from src.utils import load_config, set_seed, save_training_plots


def parse_args():
    """Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞"""
    parser = argparse.ArgumentParser(description='IQL Multi-Agent RL Training')
    parser.add_argument('--config', type=str, default='config.yaml',
                       help='ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ')
    parser.add_argument('--seed', type=int, default=42,
                       help='ÈöèÊú∫ÁßçÂ≠ê')
    parser.add_argument('--env', type=str, choices=['DEM', 'HRG', 'MSFS', 'CM', 'SMAC', 'multiwalker', 'simple_spread', 'simple_crypto'],
                       help='ÁéØÂ¢ÉÂêçÁß∞ (Ë¶ÜÁõñÈÖçÁΩÆÊñá‰ª∂)')
    parser.add_argument('--difficulty', type=str,
                       help='ÈöæÂ∫¶Á∫ßÂà´/Âú∞ÂõæÂêçÁß∞ (Ë¶ÜÁõñÈÖçÁΩÆÊñá‰ª∂)\n'
                            'ÂØπ‰∫éDEM/HRG/MSFS/CM: easy, normal, hard\n'
                            'ÂØπ‰∫éSMAC: Âú∞ÂõæÂêçÁß∞ (8m, 3s5z, MMMÁ≠â) Êàñ easy/normal/hard\n'
                            'ÂØπ‰∫éPettingZoo: default')
    parser.add_argument('--episodes', type=int,
                       help='ËÆ≠ÁªÉepisodesÊï∞ (Ë¶ÜÁõñÈÖçÁΩÆÊñá‰ª∂)')
    parser.add_argument('--plots', action='store_true',
                       help='Generate and save training plots')
    parser.add_argument('--show-plots', action='store_true',
                       help='Display plots after training')
    parser.add_argument('--plot-dir', type=str, default='plots',
                       help='Directory to save plots')

    return parser.parse_args()


def main():
    """‰∏ªÂáΩÊï∞"""
    args = parse_args()

    # ËÆæÁΩÆÈöèÊú∫ÁßçÂ≠ê
    set_seed(args.seed)

    # Âä†ËΩΩÈÖçÁΩÆ
    try:
        config = load_config(args.config)
        print(f"‚úÖ ÈÖçÁΩÆÂ∑≤Âä†ËΩΩ: {args.config}")
    except FileNotFoundError:
        print(f"‚ùå ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®: {args.config}")
        return
    except Exception as e:
        print(f"‚ùå ÈÖçÁΩÆÊñá‰ª∂Âä†ËΩΩÂ§±Ë¥•: {e}")
        return

    # ÂëΩ‰ª§Ë°åÂèÇÊï∞Ë¶ÜÁõñÈÖçÁΩÆ
    if args.env:
        config['env']['name'] = args.env
    if args.difficulty:
        config['env']['difficulty'] = args.difficulty
    if args.episodes:
        config['training']['total_episodes'] = args.episodes

    print(f"üéÆ ÁéØÂ¢É: {config['env']['name']}")
    print(f"üéØ ÈöæÂ∫¶: {config['env']['difficulty']}")
    print(f"üîÑ Episodes: {config['training']['total_episodes']}")
    print(f"üé≤ ÈöèÊú∫ÁßçÂ≠ê: {args.seed}")

    # ÂàõÂª∫checkpointsÁõÆÂΩï
    os.makedirs('checkpoints', exist_ok=True)

    # ÂàõÂª∫plotsÁõÆÂΩï if needed
    if args.plots or args.show_plots:
        os.makedirs(args.plot_dir, exist_ok=True)
        print(f"üìä Plots will be saved to: {args.plot_dir}")

    # ÂàõÂª∫ËÆ≠ÁªÉÂô®
    try:
        trainer = IQLTrainer(config)
        print("‚úÖ ËÆ≠ÁªÉÂô®ÂàõÂª∫ÊàêÂäü")
    except Exception as e:
        print(f"‚ùå ËÆ≠ÁªÉÂô®ÂàõÂª∫Â§±Ë¥•: {e}")
        return

    # ÂºÄÂßãËÆ≠ÁªÉ
    try:
        episode_rewards = trainer.train()

        # ÊâìÂç∞ËÆ≠ÁªÉÁªìÊûúÁªüËÆ°
        import numpy as np
        avg_reward = np.mean(episode_rewards[-1000:])  # ÊúÄÂêé1000‰∏™episodeÁöÑÂπ≥ÂùáÂ•ñÂä±
        print(f"\nüìä ËÆ≠ÁªÉÁªìÊûúÁªüËÆ°:")
        print(f"   ÊúÄÁªàÂπ≥ÂùáÂ•ñÂä±: {avg_reward:.2f}")
        print(f"   ÊÄªepisodes: {len(episode_rewards)}")

        # ÊúÄÁªàËØÑ‰º∞
        final_eval = trainer.evaluate(num_episodes=20)
        print(f"   ÊúÄÁªàËØÑ‰º∞ÂàÜÊï∞: {final_eval:.2f}")

        # ‰øùÂ≠òËÆ≠ÁªÉÊï∞ÊçÆ
        print(f"\nüíæ ‰øùÂ≠òËÆ≠ÁªÉÊï∞ÊçÆ...")
        try:
            data_file = trainer.save_training_data(save_dir='checkpoints')
            print(f"‚úÖ Êï∞ÊçÆÊñá‰ª∂Â∑≤‰øùÂ≠ò")
        except Exception as e:
            print(f"‚ö†Ô∏è  ‰øùÂ≠òÊï∞ÊçÆÂ§±Ë¥•: {e}")

        # ÁîüÊàêÂõæË°®
        if args.plots or args.show_plots:
            print("\nüìä Generating training plots...")
            try:
                metrics = trainer.get_training_metrics()
                env_name = f"{config['env']['name']}_{config['env']['difficulty']}"

                saved_files = save_training_plots(
                    episode_rewards=metrics['episode_rewards'],
                    episode_lengths=metrics['episode_lengths'],
                    losses=metrics['losses'],
                    eval_episodes=metrics['eval_episodes'],
                    eval_rewards=metrics['eval_rewards'],
                    epsilon_values=metrics['epsilon_history'],
                    save_dir=args.plot_dir,
                    env_name=env_name,
                    config=config,
                    show_plots=args.show_plots
                )

                print(f"‚úÖ Successfully generated {len(saved_files)} plots:")
                for file_path in saved_files:
                    print(f"   üìà {file_path}")

            except Exception as e:
                print(f"‚ùå Error generating plots: {e}")
                import traceback
                traceback.print_exc()

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Training interrupted by user")

        # Âç≥‰Ωø‰∏≠Êñ≠‰πüÂ∞ùËØïÁîüÊàêÂõæË°®
        if args.plots or args.show_plots:
            print("\nüìä Generating plots for interrupted training...")
            try:
                metrics = trainer.get_training_metrics()
                if len(metrics['episode_rewards']) > 0:
                    env_name = f"{config['env']['name']}_{config['env']['difficulty']}"

                    saved_files = save_training_plots(
                        episode_rewards=metrics['episode_rewards'],
                        episode_lengths=metrics['episode_lengths'],
                        losses=metrics['losses'],
                        eval_episodes=metrics['eval_episodes'],
                        eval_rewards=metrics['eval_rewards'],
                        epsilon_values=metrics['epsilon_history'],
                        save_dir=args.plot_dir,
                        env_name=env_name,
                        config=config,
                        show_plots=args.show_plots
                    )

                    print(f"‚úÖ Generated {len(saved_files)} plots from interrupted training:")
                    for file_path in saved_files:
                        print(f"   üìà {file_path}")
            except Exception as e:
                print(f"‚ùå Could not generate plots: {e}")

    except Exception as e:
        print(f"\n‚ùå Error during training: {e}")
        import traceback
        traceback.print_exc()
    finally:
        trainer.close()
        print("üîö Trainer closed")


if __name__ == "__main__":
    main()